
// Copyright (c) 2020-2024, ARM Limited.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

namespace tosa;

// This corresponds to the version.
file_identifier "TOSA";
// File extension of any written files.
file_extension "tosa";

// NOTE: New values added to the schema should be placed
// at the end of the list in order to keep schema stable.

enum DType:uint32 {
  UNKNOWN = 0,
  BOOL,
  UINT8,
  INT4,
  INT8,
  INT16,
  INT32,
  INT48,
  FP32,
  UINT16,
  FP16,
  BF16,
  SHAPE,
  FP8E4M3,
  FP8E5M2,
}

enum ResizeMode:uint32 {
  UNKNOWN = 0,
  NEAREST,
  BILINEAR,
}

enum NanPropagationMode:uint32 {
  UNKNOWN = 0,
  PROPAGATE,
  IGNORE,
}

enum Op:uint32 {
  UNKNOWN = 0,
  // Tensor Operators
  ARGMAX,
  AVG_POOL2D,
  CONV2D,
  CONV3D,
  DEPTHWISE_CONV2D,
  FFT2D,
  MATMUL,
  MAX_POOL2D,
  RFFT2D,
  TRANSPOSE_CONV2D,
  // Activation Functions
  CLAMP,
  ERF,
  SIGMOID,
  TANH,
  // Elementwise Binary Operators
  ADD,
  ARITHMETIC_RIGHT_SHIFT,
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_XOR,
  INTDIV,
  LOGICAL_AND,
  LOGICAL_LEFT_SHIFT,
  LOGICAL_RIGHT_SHIFT,
  LOGICAL_OR,
  LOGICAL_XOR,
  MAXIMUM,
  MINIMUM,
  MUL,
  POW,
  SUB,
  TABLE,
  // Elementwise Unary Operators
  ABS,
  BITWISE_NOT,
  CEIL,
  CLZ,
  COS,
  EXP,
  FLOOR,
  LOG,
  LOGICAL_NOT,
  NEGATE,
  RECIPROCAL,
  RSQRT,
  SIN,
  // Elementwise Ternary Operators
  SELECT,
  // Comparison Operators
  EQUAL,
  GREATER,
  GREATER_EQUAL,
  // Reduction Operators
  REDUCE_ALL,
  REDUCE_ANY,
  REDUCE_MAX,
  REDUCE_MIN,
  REDUCE_PRODUCT,
  REDUCE_SUM,
  // Data Layout
  CONCAT,
  PAD,
  RESHAPE,
  REVERSE,
  SLICE,
  TILE,
  TRANSPOSE,
  // Scatter/Gather Operators
  GATHER,
  SCATTER,
  // Image Operators
  RESIZE,
  // Type Conversion
  CAST,
  CAST_STOCHASTIC,
  RESCALE,
  // Data Nodes
  CONST,
  RAND_SEED,
  RAND_UNIFORM,
  IDENTITY,
  // Custom Operators
  CUSTOM,
  // Control Flow Operators
  COND_IF,
  WHILE_LOOP,
  YIELD,
  // Variable Operators
  VARIABLE,
  VARIABLE_WRITE,
  VARIABLE_READ,
  // Shape Operators
  CONST_SHAPE,
}

union Attribute {
  ARGMAX_Attribute,
  AVG_POOL2D_Attribute,
  CONV2D_Attribute,
  CONV3D_Attribute,
  DEPTHWISE_CONV2D_Attribute,
  FFT2D_Attribute,
  MATMUL_Attribute,
  MAX_POOL2D_Attribute,
  RFFT2D_Attribute,
  TRANSPOSE_CONV2D_Attribute,
  CLAMP_Attribute,
  ERF_Attribute,
  SIGMOID_Attribute,
  TANH_Attribute,
  ADD_Attribute,
  ARITHMETIC_RIGHT_SHIFT_Attribute,
  BITWISE_AND_Attribute,
  BITWISE_OR_Attribute,
  BITWISE_XOR_Attribute,
  INTDIV_Attribute,
  LOGICAL_AND_Attribute,
  LOGICAL_LEFT_SHIFT_Attribute,
  LOGICAL_RIGHT_SHIFT_Attribute,
  LOGICAL_OR_Attribute,
  LOGICAL_XOR_Attribute,
  MAXIMUM_Attribute,
  MINIMUM_Attribute,
  MUL_Attribute,
  POW_Attribute,
  SUB_Attribute,
  TABLE_Attribute,
  ABS_Attribute,
  BITWISE_NOT_Attribute,
  CEIL_Attribute,
  CLZ_Attribute,
  COS_Attribute,
  EXP_Attribute,
  FLOOR_Attribute,
  LOG_Attribute,
  LOGICAL_NOT_Attribute,
  NEGATE_Attribute,
  RECIPROCAL_Attribute,
  RSQRT_Attribute,
  SIN_Attribute,
  SELECT_Attribute,
  EQUAL_Attribute,
  GREATER_Attribute,
  GREATER_EQUAL_Attribute,
  REDUCE_ALL_Attribute,
  REDUCE_ANY_Attribute,
  REDUCE_MAX_Attribute,
  REDUCE_MIN_Attribute,
  REDUCE_PRODUCT_Attribute,
  REDUCE_SUM_Attribute,
  CONCAT_Attribute,
  PAD_Attribute,
  RESHAPE_Attribute,
  REVERSE_Attribute,
  SLICE_Attribute,
  TILE_Attribute,
  TRANSPOSE_Attribute,
  GATHER_Attribute,
  SCATTER_Attribute,
  RESIZE_Attribute,
  CAST_Attribute,
  CAST_STOCHASTIC_Attribute,
  RESCALE_Attribute,
  CONST_Attribute,
  RAND_SEED_Attribute,
  RAND_UNIFORM_Attribute,
  IDENTITY_Attribute,
  CUSTOM_Attribute,
  COND_IF_Attribute,
  WHILE_LOOP_Attribute,
  YIELD_Attribute,
  VARIABLE_Attribute,
  VARIABLE_WRITE_Attribute,
  VARIABLE_READ_Attribute,
  CONST_SHAPE_Attribute,
}

table ARGMAX_Attribute {
  axis: int32;
  nan_mode: NanPropagationMode;
}

table AVG_POOL2D_Attribute {
  pad: [int32];
  kernel: [int32];
  stride: [int32];
  input_zp: int32;
  output_zp: int32;
  acc_type: DType;
}

table CONV2D_Attribute {
  pad: [int32];
  stride: [int32];
  dilation: [int32];
  input_zp: int32;
  weight_zp: int32;
  local_bound: bool;
  acc_type: DType;
}

table CONV3D_Attribute {
  pad: [int32];
  stride: [int32];
  dilation: [int32];
  input_zp: int32;
  weight_zp: int32;
  local_bound: bool;
  acc_type: DType;
}

table DEPTHWISE_CONV2D_Attribute {
  pad: [int32];
  stride: [int32];
  dilation: [int32];
  input_zp: int32;
  weight_zp: int32;
  local_bound: bool;
  acc_type: DType;
}

table FFT2D_Attribute {
  inverse: bool;
  local_bound: bool;
}

table MATMUL_Attribute {
  a_zp: int32;
  b_zp: int32;
}

table MAX_POOL2D_Attribute {
  kernel: [int32];
  stride: [int32];
  pad: [int32];
  nan_mode: NanPropagationMode;
}

table RFFT2D_Attribute {
  local_bound: bool;
}

table TRANSPOSE_CONV2D_Attribute {
  out_pad: [int32];
  stride: [int32];
  input_zp: int32;
  weight_zp: int32;
  local_bound: bool;
  acc_type: DType;
}

table CLAMP_Attribute {
  min_val: [ubyte] (force_align: 8);
  max_val: [ubyte] (force_align: 8);
  nan_mode: NanPropagationMode;
}

table ERF_Attribute {
}

table SIGMOID_Attribute {
}

table TANH_Attribute {
}

table ADD_Attribute {
}

table ARITHMETIC_RIGHT_SHIFT_Attribute {
  round: bool;
}

table BITWISE_AND_Attribute {
}

table BITWISE_OR_Attribute {
}

table BITWISE_XOR_Attribute {
}

table INTDIV_Attribute {
}

table LOGICAL_AND_Attribute {
}

table LOGICAL_LEFT_SHIFT_Attribute {
}

table LOGICAL_RIGHT_SHIFT_Attribute {
}

table LOGICAL_OR_Attribute {
}

table LOGICAL_XOR_Attribute {
}

table MAXIMUM_Attribute {
  nan_mode: NanPropagationMode;
}

table MINIMUM_Attribute {
  nan_mode: NanPropagationMode;
}

table MUL_Attribute {
  shift: int32;
}

table POW_Attribute {
}

table SUB_Attribute {
}

table TABLE_Attribute {
}

table ABS_Attribute {
}

table BITWISE_NOT_Attribute {
}

table CEIL_Attribute {
}

table CLZ_Attribute {
}

table COS_Attribute {
}

table EXP_Attribute {
}

table FLOOR_Attribute {
}

table LOG_Attribute {
}

table LOGICAL_NOT_Attribute {
}

table NEGATE_Attribute {
  input1_zp: int32;
  output_zp: int32;
}

table RECIPROCAL_Attribute {
}

table RSQRT_Attribute {
}

table SIN_Attribute {
}

table SELECT_Attribute {
}

table EQUAL_Attribute {
}

table GREATER_Attribute {
}

table GREATER_EQUAL_Attribute {
}

table REDUCE_ALL_Attribute {
  axis: int32;
}

table REDUCE_ANY_Attribute {
  axis: int32;
}

table REDUCE_MAX_Attribute {
  axis: int32;
  nan_mode: NanPropagationMode;
}

table REDUCE_MIN_Attribute {
  axis: int32;
  nan_mode: NanPropagationMode;
}

table REDUCE_PRODUCT_Attribute {
  axis: int32;
}

table REDUCE_SUM_Attribute {
  axis: int32;
}

table CONCAT_Attribute {
  axis: int32;
}

table PAD_Attribute {
  pad_const: [ubyte] (force_align: 8);
}

table RESHAPE_Attribute {
}

table REVERSE_Attribute {
  axis: int32;
}

table SLICE_Attribute {
}

table TILE_Attribute {
}

table TRANSPOSE_Attribute {
  perms: [int32];
}

table GATHER_Attribute {
}

table SCATTER_Attribute {
}

table RESIZE_Attribute {
  mode: ResizeMode;
}

table CAST_Attribute {
}

table CAST_STOCHASTIC_Attribute {
}

table RESCALE_Attribute {
  input_zp: int32;
  output_zp: int32;
  scale32: bool;
  double_round: bool;
  per_channel: bool;
  input_unsigned: bool;
  output_unsigned: bool;
}

table CONST_Attribute {
}

table RAND_SEED_Attribute {
}

table RAND_UNIFORM_Attribute {
  use_seed: bool;
}

table IDENTITY_Attribute {
}

table CUSTOM_Attribute {
  operator_name:string;
  domain_name:string;
  implementation_attrs:[ubyte];
}

table COND_IF_Attribute {
  then_graph: string;
  else_graph: string;
}

table WHILE_LOOP_Attribute {
  cond_graph: string;
  body_graph: string;
}

table YIELD_Attribute {
}

table VARIABLE_Attribute {
}

table VARIABLE_WRITE_Attribute {
}

table VARIABLE_READ_Attribute {
}

table CONST_SHAPE_Attribute {
}


table Version {
  _major: int32 = -1;
  _minor: int32 = -1;
  _patch: int32 = -1;
  _draft: bool = true;
}

table TosaTensor {
  name:string;                      // name of the tensor, used for solving dependency
  shape:[int32];                    // shape of the tensor
  type:DType;                       // data type of the tensor
  data: [ubyte] (force_align: 8);   // raw data array if it's a constant tensor.
  variable: bool;                   // is this a variable tensor
  is_unranked: bool;                // whether this is an unranked tensor
  variable_name:string;             // name for variable attribute
}

table TosaOperator {
  op:Op;                    // operator enum
  attribute:Attribute;      // union structure. operator attribute
  inputs:[string];          // list of input tensor names
  outputs:[string];         // list of output tensor names
}

table TosaBasicBlock {
  name:string;              // basic block name
  operators:[TosaOperator]; // operators array
  tensors:[TosaTensor];     // tensors array
  inputs:[string];          // name of graph inputs
  outputs:[string];         // name of graph outputs
}

table TosaRegion {
  name:string;             // name of region
  blocks:[TosaBasicBlock]; // basic blocks array
}

table TosaGraph {
  version:Version (required);
  regions:[TosaRegion];       // regions array
}

root_type TosaGraph;
