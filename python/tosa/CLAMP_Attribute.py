# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tosa

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CLAMP_Attribute(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CLAMP_Attribute()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCLAMP_Attribute(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CLAMP_AttributeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x4F\x53\x41", size_prefixed=size_prefixed)

    # CLAMP_Attribute
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CLAMP_Attribute
    def MinVal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CLAMP_Attribute
    def MinValAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CLAMP_Attribute
    def MinValLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CLAMP_Attribute
    def MinValIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # CLAMP_Attribute
    def MaxVal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CLAMP_Attribute
    def MaxValAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CLAMP_Attribute
    def MaxValLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CLAMP_Attribute
    def MaxValIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CLAMP_Attribute
    def NanMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CLAMP_AttributeStart(builder):
    builder.StartObject(3)

def Start(builder):
    CLAMP_AttributeStart(builder)

def CLAMP_AttributeAddMinVal(builder, minVal):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(minVal), 0)

def AddMinVal(builder, minVal):
    CLAMP_AttributeAddMinVal(builder, minVal)

def CLAMP_AttributeStartMinValVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartMinValVector(builder, numElems):
    return CLAMP_AttributeStartMinValVector(builder, numElems)

def CLAMP_AttributeAddMaxVal(builder, maxVal):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(maxVal), 0)

def AddMaxVal(builder, maxVal):
    CLAMP_AttributeAddMaxVal(builder, maxVal)

def CLAMP_AttributeStartMaxValVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartMaxValVector(builder, numElems):
    return CLAMP_AttributeStartMaxValVector(builder, numElems)

def CLAMP_AttributeAddNanMode(builder, nanMode):
    builder.PrependUint32Slot(2, nanMode, 0)

def AddNanMode(builder, nanMode):
    CLAMP_AttributeAddNanMode(builder, nanMode)

def CLAMP_AttributeEnd(builder):
    return builder.EndObject()

def End(builder):
    return CLAMP_AttributeEnd(builder)
