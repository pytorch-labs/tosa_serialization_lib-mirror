# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tosa

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DEPTHWISE_CONV2D_Attribute(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DEPTHWISE_CONV2D_Attribute()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDEPTHWISE_CONV2D_Attribute(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DEPTHWISE_CONV2D_AttributeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x4F\x53\x41", size_prefixed=size_prefixed)

    # DEPTHWISE_CONV2D_Attribute
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DEPTHWISE_CONV2D_Attribute
    def Pad(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def PadAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def PadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def PadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DEPTHWISE_CONV2D_Attribute
    def Stride(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def StrideAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def StrideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def StrideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DEPTHWISE_CONV2D_Attribute
    def Dilation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def DilationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def DilationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def DilationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DEPTHWISE_CONV2D_Attribute
    def InputZp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def WeightZp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DEPTHWISE_CONV2D_Attribute
    def LocalBound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DEPTHWISE_CONV2D_Attribute
    def AccType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DEPTHWISE_CONV2D_AttributeStart(builder):
    builder.StartObject(7)

def Start(builder):
    DEPTHWISE_CONV2D_AttributeStart(builder)

def DEPTHWISE_CONV2D_AttributeAddPad(builder, pad):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pad), 0)

def AddPad(builder, pad):
    DEPTHWISE_CONV2D_AttributeAddPad(builder, pad)

def DEPTHWISE_CONV2D_AttributeStartPadVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPadVector(builder, numElems):
    return DEPTHWISE_CONV2D_AttributeStartPadVector(builder, numElems)

def DEPTHWISE_CONV2D_AttributeAddStride(builder, stride):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stride), 0)

def AddStride(builder, stride):
    DEPTHWISE_CONV2D_AttributeAddStride(builder, stride)

def DEPTHWISE_CONV2D_AttributeStartStrideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStrideVector(builder, numElems):
    return DEPTHWISE_CONV2D_AttributeStartStrideVector(builder, numElems)

def DEPTHWISE_CONV2D_AttributeAddDilation(builder, dilation):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dilation), 0)

def AddDilation(builder, dilation):
    DEPTHWISE_CONV2D_AttributeAddDilation(builder, dilation)

def DEPTHWISE_CONV2D_AttributeStartDilationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDilationVector(builder, numElems):
    return DEPTHWISE_CONV2D_AttributeStartDilationVector(builder, numElems)

def DEPTHWISE_CONV2D_AttributeAddInputZp(builder, inputZp):
    builder.PrependInt32Slot(3, inputZp, 0)

def AddInputZp(builder, inputZp):
    DEPTHWISE_CONV2D_AttributeAddInputZp(builder, inputZp)

def DEPTHWISE_CONV2D_AttributeAddWeightZp(builder, weightZp):
    builder.PrependInt32Slot(4, weightZp, 0)

def AddWeightZp(builder, weightZp):
    DEPTHWISE_CONV2D_AttributeAddWeightZp(builder, weightZp)

def DEPTHWISE_CONV2D_AttributeAddLocalBound(builder, localBound):
    builder.PrependBoolSlot(5, localBound, 0)

def AddLocalBound(builder, localBound):
    DEPTHWISE_CONV2D_AttributeAddLocalBound(builder, localBound)

def DEPTHWISE_CONV2D_AttributeAddAccType(builder, accType):
    builder.PrependUint32Slot(6, accType, 0)

def AddAccType(builder, accType):
    DEPTHWISE_CONV2D_AttributeAddAccType(builder, accType)

def DEPTHWISE_CONV2D_AttributeEnd(builder):
    return builder.EndObject()

def End(builder):
    return DEPTHWISE_CONV2D_AttributeEnd(builder)
