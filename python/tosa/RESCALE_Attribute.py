# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tosa

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RESCALE_Attribute(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RESCALE_Attribute()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRESCALE_Attribute(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RESCALE_AttributeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x4F\x53\x41", size_prefixed=size_prefixed)

    # RESCALE_Attribute
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RESCALE_Attribute
    def InputZp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RESCALE_Attribute
    def OutputZp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RESCALE_Attribute
    def Scale32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RESCALE_Attribute
    def DoubleRound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RESCALE_Attribute
    def PerChannel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RESCALE_Attribute
    def InputUnsigned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RESCALE_Attribute
    def OutputUnsigned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def RESCALE_AttributeStart(builder):
    builder.StartObject(7)

def Start(builder):
    RESCALE_AttributeStart(builder)

def RESCALE_AttributeAddInputZp(builder, inputZp):
    builder.PrependInt32Slot(0, inputZp, 0)

def AddInputZp(builder, inputZp):
    RESCALE_AttributeAddInputZp(builder, inputZp)

def RESCALE_AttributeAddOutputZp(builder, outputZp):
    builder.PrependInt32Slot(1, outputZp, 0)

def AddOutputZp(builder, outputZp):
    RESCALE_AttributeAddOutputZp(builder, outputZp)

def RESCALE_AttributeAddScale32(builder, scale32):
    builder.PrependBoolSlot(2, scale32, 0)

def AddScale32(builder, scale32):
    RESCALE_AttributeAddScale32(builder, scale32)

def RESCALE_AttributeAddDoubleRound(builder, doubleRound):
    builder.PrependBoolSlot(3, doubleRound, 0)

def AddDoubleRound(builder, doubleRound):
    RESCALE_AttributeAddDoubleRound(builder, doubleRound)

def RESCALE_AttributeAddPerChannel(builder, perChannel):
    builder.PrependBoolSlot(4, perChannel, 0)

def AddPerChannel(builder, perChannel):
    RESCALE_AttributeAddPerChannel(builder, perChannel)

def RESCALE_AttributeAddInputUnsigned(builder, inputUnsigned):
    builder.PrependBoolSlot(5, inputUnsigned, 0)

def AddInputUnsigned(builder, inputUnsigned):
    RESCALE_AttributeAddInputUnsigned(builder, inputUnsigned)

def RESCALE_AttributeAddOutputUnsigned(builder, outputUnsigned):
    builder.PrependBoolSlot(6, outputUnsigned, 0)

def AddOutputUnsigned(builder, outputUnsigned):
    RESCALE_AttributeAddOutputUnsigned(builder, outputUnsigned)

def RESCALE_AttributeEnd(builder):
    return builder.EndObject()

def End(builder):
    return RESCALE_AttributeEnd(builder)
